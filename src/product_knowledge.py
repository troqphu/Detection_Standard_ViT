"""
üî• Product Knowledge Base - Specific Analysis for Different Product Types
Provides detailed, realistic analysis based on product characteristics
"""
import numpy as np
from typing import Dict, List, Tuple

try:
    import cv2
    CV2_AVAILABLE = True
except ImportError:
    CV2_AVAILABLE = False
    print("‚ö†Ô∏è OpenCV not available, using fallback methods")

class ProductAnalyzer:
    """
    Analyzes specific product characteristics for authentic vs fake detection
    """
    
    def __init__(self):
        # Product-specific knowledge base
        self.product_knowledge = {
            'shoes': {
                'authentic_indicators': {
                    'sole_pattern': 'ƒê·∫ø gi√†y c√≥ pattern ph·ª©c t·∫°p, chi ti·∫øt s√¢u',
                    'stitching': 'ƒê∆∞·ªùng may ƒë·ªÅu ƒë·∫∑n, kh√¥ng c√≥ ch·ªâ th·ª´a',
                    'logo_placement': 'Logo ƒë·∫∑t ch√≠nh x√°c theo thi·∫øt k·∫ø g·ªëc',
                    'material_quality': 'Da/v·∫£i c√≥ texture t·ª± nhi√™n, kh√¥ng b√≥ng gi·∫£',
                    'color_accuracy': 'M√†u s·∫Øc ƒë√∫ng tone, kh√¥ng b·ªã pha lo√£ng'
                },
                'fake_indicators': {
                    'sole_pattern': 'Pattern ƒë·∫ø ƒë∆°n gi·∫£n, thi·∫øu chi ti·∫øt',
                    'stitching': 'ƒê∆∞·ªùng may l·ªói, ch·ªâ kh√¥ng ƒë·ªÅu',
                    'logo_placement': 'Logo l·ªách v·ªã tr√≠ ho·∫∑c t·ª∑ l·ªá sai',
                    'material_quality': 'V·∫≠t li·ªáu nh·ª±a gi·∫£, b√≥ng kh√¥ng t·ª± nhi√™n',
                    'color_accuracy': 'M√†u s·∫Øc sai l·ªách, th∆∞·ªùng ƒë·∫≠m ho·∫∑c nh·∫°t h∆°n'
                }
            },
            'clothing': {
                'authentic_indicators': {
                    'fabric_texture': 'V·∫£i c√≥ c·∫•u tr√∫c s·ª£i t·ª± nhi√™n, m·ªÅm m·∫°i',
                    'print_quality': 'In ·∫•n s·∫Øc n√©t, m√†u kh√¥ng lem',
                    'seam_quality': 'ƒê∆∞·ªùng may chuy√™n nghi·ªáp, overlock ƒë·ªÅu',
                    'tag_placement': 'Tag ƒë·∫∑t ƒë√∫ng v·ªã tr√≠, ch·ªØ r√µ r√†ng',
                    'sizing': 'Size chu·∫©n theo b·∫£ng size ch√≠nh h√£ng'
                },
                'fake_indicators': {
                    'fabric_texture': 'V·∫£i c·ª©ng, kh√¥ng co gi√£n t·ª± nhi√™n',
                    'print_quality': 'In m·ªù, m√†u lem l·ªói',
                    'seam_quality': 'ƒê∆∞·ªùng may th√¥, kh√¥ng overlock',
                    'tag_placement': 'Tag sai v·ªã tr√≠, font ch·ªØ l·ªói',
                    'sizing': 'Size kh√¥ng chu·∫©n, th∆∞·ªùng nh·ªè h∆°n'
                }
            },
            'accessories': {
                'authentic_indicators': {
                    'hardware_quality': 'Kim lo·∫°i ch·∫•t l∆∞·ª£ng, kh√¥ng g·ªâ s√©t',
                    'engaving_sharpness': 'Kh·∫Øc ch·ªØ s·∫Øc n√©t, s√¢u',
                    'surface_finish': 'B·ªÅ m·∫∑t ho√†n thi·ªán m·ªãn m√†ng',
                    'weight_feel': 'Tr·ªçng l∆∞·ª£ng ph√π h·ª£p v·ªõi v·∫≠t li·ªáu',
                    'packaging': 'H·ªôp ƒë·ª±ng ch√≠nh h√£ng, ch·∫•t l∆∞·ª£ng cao'
                },
                'fake_indicators': {
                    'hardware_quality': 'Kim lo·∫°i r·∫ª ti·ªÅn, d·ªÖ g·ªâ',
                    'engaving_sharpness': 'Kh·∫Øc ch·ªØ n√¥ng, kh√¥ng s·∫Øc n√©t',
                    'surface_finish': 'B·ªÅ m·∫∑t th√¥ r√°p, c√≥ v·∫øt gia c√¥ng',
                    'weight_feel': 'Qu√° nh·∫π ho·∫∑c qu√° n·∫∑ng b·∫•t th∆∞·ªùng',
                    'packaging': 'H·ªôp k√©m ch·∫•t l∆∞·ª£ng ho·∫∑c kh√¥ng c√≥'
                }
            }
        }
        
    def detect_product_type(self, image: np.ndarray, analysis: Dict) -> str:
        """
        Detect product type based on image characteristics
        """
        # Simple heuristic based on shape and features
        h, w = image.shape[:2]
        aspect_ratio = w / h
        
        if CV2_AVAILABLE:
            try:
                # Analyze edges to detect product shape
                gray = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)
                edges = cv2.Canny(gray, 50, 150)
                contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
                
                if contours:
                    largest_contour = max(contours, key=cv2.contourArea)
                    area_ratio = cv2.contourArea(largest_contour) / (h * w)
                    
                    # Heuristic classification
                    if aspect_ratio > 1.5 and area_ratio > 0.3:
                        return 'shoes'
                    elif aspect_ratio < 0.8 and area_ratio > 0.4:
                        return 'clothing'
                    elif area_ratio < 0.3:
                        return 'accessories'
            except Exception as e:
                print(f"‚ö†Ô∏è CV2 processing failed: {e}")
        
        # Fallback method without CV2
        if aspect_ratio > 1.3:
            return 'shoes'
        elif aspect_ratio < 0.9:
            return 'clothing'
        else:
            return 'accessories'
        
    def analyze_product_specific_features(self, image: np.ndarray, analysis: Dict, 
                                        product_type: str, is_fake: bool) -> Dict:
        """
        Analyze product-specific features for detailed explanation
        """
        if product_type not in self.product_knowledge:
            product_type = 'general'
            
        specific_analysis = {}
        
        # Get product knowledge
        if product_type != 'general':
            knowledge = self.product_knowledge[product_type]
            indicators = knowledge['fake_indicators'] if is_fake else knowledge['authentic_indicators']
            
            # Analyze based on product type
            if product_type == 'shoes':
                specific_analysis.update(self._analyze_shoe_features(image, analysis, indicators, is_fake))
            elif product_type == 'clothing':
                specific_analysis.update(self._analyze_clothing_features(image, analysis, indicators, is_fake))
            elif product_type == 'accessories':
                specific_analysis.update(self._analyze_accessory_features(image, analysis, indicators, is_fake))
        
        return specific_analysis
        
    def _analyze_shoe_features(self, image: np.ndarray, analysis: Dict, 
                              indicators: Dict, is_fake: bool) -> Dict:
        """Analyze specific shoe features"""
        shoe_analysis = {}
        
        # Sole pattern analysis
        texture_strength = analysis.get('texture_strength', 0.5)
        if texture_strength > 0.7:
            shoe_analysis['sole_quality'] = "ƒê·∫ø gi√†y c√≥ texture ph·ª©c t·∫°p, chi ti·∫øt pattern r√µ r√†ng"
        elif texture_strength > 0.4:
            shoe_analysis['sole_quality'] = "ƒê·∫ø gi√†y c√≥ texture trung b√¨nh, m·ªôt s·ªë pattern c√≥ th·ªÉ th·∫•y"
        else:
            shoe_analysis['sole_quality'] = "ƒê·∫ø gi√†y m·ªãn, √≠t texture ho·∫∑c pattern ƒë∆°n gi·∫£n"
            
        # Stitching quality
        stitching_quality = analysis.get('stitching_quality', 0.5)
        if stitching_quality > 0.6:
            shoe_analysis['stitching'] = "ƒê∆∞·ªùng may ch√≠nh x√°c, ƒë·ªÅu ƒë·∫∑n theo chu·∫©n th∆∞∆°ng hi·ªáu"
        elif stitching_quality > 0.3:
            shoe_analysis['stitching'] = "ƒê∆∞·ªùng may t∆∞∆°ng ƒë·ªëi t·ªët, c√≥ th·ªÉ c√≥ m·ªôt s·ªë ch·ªó kh√¥ng ho√†n h·∫£o"
        else:
            shoe_analysis['stitching'] = "ƒê∆∞·ªùng may th√¥, kh√¥ng ƒë·ªÅu ho·∫∑c c√≥ l·ªói r√µ r√†ng"
            
        # Logo placement and quality
        logo_sharpness = analysis.get('logo_sharpness', 0.5)
        alignment_score = analysis.get('alignment_score', 0.5)
        
        if logo_sharpness > 0.7 and alignment_score > 0.7:
            shoe_analysis['branding'] = "Logo r·∫•t s·∫Øc n√©t, ƒë·∫∑t ƒë√∫ng v·ªã tr√≠ theo thi·∫øt k·∫ø g·ªëc"
        elif logo_sharpness > 0.4 or alignment_score > 0.4:
            shoe_analysis['branding'] = "Logo kh√° r√µ r√†ng, v·ªã tr√≠ g·∫ßn nh∆∞ chu·∫©n"
        else:
            shoe_analysis['branding'] = "Logo m·ªù ho·∫∑c ƒë·∫∑t sai v·ªã tr√≠, c√≥ th·ªÉ l√† h√†ng copy"
            
        return shoe_analysis
        
    def _analyze_clothing_features(self, image: np.ndarray, analysis: Dict,
                                  indicators: Dict, is_fake: bool) -> Dict:
        """Analyze specific clothing features"""
        clothing_analysis = {}
        
        # Fabric texture
        surface_roughness = analysis.get('surface_roughness', 0.5)
        if surface_roughness > 0.8:
            clothing_analysis['fabric'] = "V·∫£i c√≥ c·∫•u tr√∫c s·ª£i ph·ª©c t·∫°p, ch·∫•t l∆∞·ª£ng cao"
        elif surface_roughness > 0.4:
            clothing_analysis['fabric'] = "V·∫£i ch·∫•t l∆∞·ª£ng trung b√¨nh, c·∫•u tr√∫c s·ª£i c∆° b·∫£n"
        else:
            clothing_analysis['fabric'] = "V·∫£i m·ªãn ƒë·ªÅu, c√≥ th·ªÉ l√† synthetic ho·∫∑c blend"
            
        # Print quality
        color_bleeding = analysis.get('color_bleeding', 0.5)
        color_vibrancy = analysis.get('color_vibrancy', 0.5)
        
        if color_bleeding < 0.2 and color_vibrancy > 0.6:
            clothing_analysis['print_quality'] = "In ·∫•n s·∫Øc n√©t, m√†u kh√¥ng lem, ch·∫•t l∆∞·ª£ng cao"
        elif color_bleeding < 0.5 and color_vibrancy > 0.4:
            clothing_analysis['print_quality'] = "In ·∫•n t∆∞∆°ng ƒë·ªëi t·ªët, m√†u ·ªïn ƒë·ªãnh"
        else:
            clothing_analysis['print_quality'] = "In ·∫•n k√©m, m√†u c√≥ th·ªÉ lem ho·∫∑c m·ªù"
            
        return clothing_analysis
        
    def _analyze_accessory_features(self, image: np.ndarray, analysis: Dict,
                                   indicators: Dict, is_fake: bool) -> Dict:
        """Analyze specific accessory features"""
        accessory_analysis = {}
        
        # Hardware quality
        shine_ratio = analysis.get('shine_ratio', 0.5)
        if shine_ratio > 0.6:
            accessory_analysis['hardware'] = "Kim lo·∫°i c√≥ ƒë·ªô b√≥ng cao, ch·∫•t l∆∞·ª£ng premium"
        elif shine_ratio > 0.3:
            accessory_analysis['hardware'] = "Kim lo·∫°i c√≥ ƒë·ªô b√≥ng v·ª´a ph·∫£i, ch·∫•t l∆∞·ª£ng ti√™u chu·∫©n"
        else:
            accessory_analysis['hardware'] = "B·ªÅ m·∫∑t √≠t b√≥ng, c√≥ th·ªÉ l√† kim lo·∫°i r·∫ª ho·∫∑c coating k√©m"
            
        # Surface finish
        surface_smoothness = analysis.get('surface_smoothness', 0.5)
        if surface_smoothness > 0.8:
            accessory_analysis['finish'] = "B·ªÅ m·∫∑t ho√†n thi·ªán r·∫•t m·ªãn, gia c√¥ng t·ªâ m·ªâ"
        elif surface_smoothness > 0.5:
            accessory_analysis['finish'] = "B·ªÅ m·∫∑t kh√° m·ªãn, gia c√¥ng ti√™u chu·∫©n"
        else:
            accessory_analysis['finish'] = "B·ªÅ m·∫∑t th√¥ r√°p, c√≥ th·ªÉ th·∫•y v·∫øt gia c√¥ng"
            
        return accessory_analysis
        
    def generate_product_specific_explanation(self, product_type: str, specific_analysis: Dict,
                                            is_fake: bool, confidence: float) -> str:
        """Generate product-specific explanation"""
        explanation = []
        
        if product_type == 'shoes':
            explanation.append("üîç **Ph√¢n T√≠ch Chuy√™n Bi·ªát Cho Gi√†y:**")
            
            if 'sole_quality' in specific_analysis:
                explanation.append(f"‚Ä¢ **ƒê·∫ø gi√†y**: {specific_analysis['sole_quality']}")
                
            if 'stitching' in specific_analysis:
                explanation.append(f"‚Ä¢ **ƒê∆∞·ªùng may**: {specific_analysis['stitching']}")
                
            if 'branding' in specific_analysis:
                explanation.append(f"‚Ä¢ **Logo/th∆∞∆°ng hi·ªáu**: {specific_analysis['branding']}")
                
        elif product_type == 'clothing':
            explanation.append("üîç **Ph√¢n T√≠ch Chuy√™n Bi·ªát Cho Qu·∫ßn √Åo:**")
            
            if 'fabric' in specific_analysis:
                explanation.append(f"‚Ä¢ **Ch·∫•t v·∫£i**: {specific_analysis['fabric']}")
                
            if 'print_quality' in specific_analysis:
                explanation.append(f"‚Ä¢ **Ch·∫•t l∆∞·ª£ng in**: {specific_analysis['print_quality']}")
                
        elif product_type == 'accessories':
            explanation.append("üîç **Ph√¢n T√≠ch Chuy√™n Bi·ªát Cho Ph·ª• Ki·ªán:**")
            
            if 'hardware' in specific_analysis:
                explanation.append(f"‚Ä¢ **Kim lo·∫°i**: {specific_analysis['hardware']}")
                
            if 'finish' in specific_analysis:
                explanation.append(f"‚Ä¢ **Ho√†n thi·ªán b·ªÅ m·∫∑t**: {specific_analysis['finish']}")
        
        # Add specific authenticity assessment
        if is_fake:
            if confidence > 0.8:
                explanation.append("\nüí° **ƒê√°nh gi√°**: Nhi·ªÅu d·∫•u hi·ªáu cho th·∫•y ƒë√¢y l√† h√†ng **KH√îNG CH√çNH H√ÉNG**")
            else:
                explanation.append("\nüí° **ƒê√°nh gi√°**: C√≥ kh·∫£ nƒÉng cao ƒë√¢y l√† h√†ng **KH√îNG CH√çNH H√ÉNG**")
        else:
            if confidence > 0.8:
                explanation.append("\nüí° **ƒê√°nh gi√°**: C√°c ƒë·∫∑c ƒëi·ªÉm ph√π h·ª£p v·ªõi h√†ng **CH√çNH H√ÉNG**")
            else:
                explanation.append("\nüí° **ƒê√°nh gi√°**: C√≥ kh·∫£ nƒÉng cao ƒë√¢y l√† h√†ng **CH√çNH H√ÉNG**")
                
        return "\n".join(explanation)
